---
layout: _templates/layout-basic.njk
title: Development
includeComponent:
  - pfe-modal
---

{% import '_templates/component/components.njk' as components %}

{% call components.section("Building the design system") -%}

  <p>Red Hat's digital design system is our method for allowing designers and developers across different groups to concurrently build branded experiences consistently. Based on the foundations of PatternFly and Red Hat Brand Standards, our digital design system reflects the Red Hat brand digitally.</p>

  <h3>The foundations</h3>

  <p>The Red Hat brand has a strong voice. In order to make our design system feel like Red Hat, we utilize the foundational elements to enhance the look and feel of our components. Foundations like typography, scale, color, while using corporate iconography establishes the Red Hat brand across our digital properties.</p>

  <hr class="margin-top--10 margin-bottom--10">

  <h3>PatternFly</h3>

  <p>From the user interface perspective, we partner with Red Hat’s User Experience & Design (UXD) team as they build PatternFly, the open source design system utilized for Red Hat products.  PatternFly can be used by designers & developers inside and outside of Red Hat.</p> 

  <p>By sharing foundational principles and common component design between PatternFly and The Red Hat Design System (RHDS) for web properties, we create a language across all of Red Hat, for each stage  of the customer lifecycle. </p>

  <p>PatternFly is the foundation for all components that we design, and we contribute design suggestions back to help grow its capabilities. When building or updating a component, PatternFly is always our first source of inspiration. We share design where possible, in every way.</p>

  <p>The implementation of the PatternFly design system focuses primarily on the building blocks for creating applications, and providing HTML and CSS assets. </p>

  <p>The Red Hat digital design system's output is primarily focused on websites or other digital properties.</p>

  <pfe-cta>
    <a href="https://www.patternfly.org">Visit PatternFly.org</a>
  </pfe-cta>

  <p>[need image of PF components]</p>

  <hr class="margin-top--10 margin-bottom--10">

  <h3>PatternFly Elements (PFE)</h3>

  <p>PatternFly Elements leverages the PatternFly design system and some code elements to  create an accessible, open source web component library. Web components, or native custom HTML tags, allow users to easily include design system elements across their webpages and applications. PatternFly Elements not only work in any application framework, they are “evergreen”, meaning the components themselves can be upgraded easily, allowing for consistency, scalability and flexibility. PatternFly Elements are used across all of Red Hat’s core websites, including but not limited to redhat.com, access.redhat.com, developers.redhat.com and connect.redhat.com.</p>

  <pfe-cta>
    <a href="https://www.patternflyelements.org">Visit patternflyelements.org</a>
  </pfe-cta>

  <p>[need image of PF components]</p>

  <hr class="margin-top--10 margin-bottom--10">

  <h3>RCUE (Red Hat Common User Experience)</h3>

  <p>The Red Hat Common User Experience is an implementation method consisting of Red Hat branding applied to  PatternFly components in order to promote design commonality across all of Red Hat’s Enterprise product offerings. The RCUE layer shares design commonality with the Red Hat digital design system, but is not the same branded layer.</p>

  <p>The Red Hat Common User Experience is a layer of design elements (i.e. CSS, fonts, logos and imagery) that are built on top of PatternFly components to add Red Hat branding to the interface. RCUE is used to achieve branded design commonality across all of Red Hat’s Enterprise product offerings. The RCUE layer shares design commonality with the Red Hat digital design system, but is not the same branded layer.</p>

  <ul>
    <li>RHDS: Red Hat branded design system components</li>
    <li>PF + RCUE: Red Hat branded PatternFly components</li>
  </ul>

  <h4>RCUE vs. RedHat-theme CSS variables</h4>

  <table style="width:100%">
    <tr>
      <th>Design system</th>
      <th>Implementation</th>
      <th>Visual result</th>
    </tr>
    <tr>
      <td>PatternFly</td>
      <td>PatternFly components</td>
      <td><img src="https://via.placeholder.com/300x200"></td>
    </tr>
    <tr>
      <td>Red Hat</td>
      <td>PatternFly components + RCUE CSS layer</td>
      <td><img src="https://via.placeholder.com/300x200"></td>
    </tr>
    <tr>
      <td>PatternFly</td>
      <td>PatternFly Elements components</td>
      <td><img src="https://via.placeholder.com/300x200"></td>
    </tr>
    <tr>
      <td>Red Hat</td>
      <td>PatternFly Elements components + Redhat-theme CSS variables</td>
      <td><img src="https://via.placeholder.com/300x200"></td>
    </tr>
  </table>


  <h3>WebRH</h3>

  <p>WebRH is an asset library of components & patterns, created within Red Hat Marketing. The goal was to bring consistency to redhat.com, and now other Red Hat web properties built on Drupal. These patterns are leveraged by Drupal through tools that make up the FTS (Flexible template system).</p>

  <p>WebRH contains components and patterns composed of JSON schemas, Twig templates (to be utilized in Drupal), custom CSS and PatternFly Elements web components. WebRH creates flexible patterns within Drupal so that content editors can create visually consistent experiences within unstructured data or content.</p>

  <p>A copy of the WebRH library is viewable within the <a href="https://webrh-patternkit.int.open.paas.redhat.com/schema/pattern_page">Schema Editor / Styleguide</a> which allows anyone to build and test new and existing patterns through a user interface similar to FTS in Drupal.</p> 

  <p>[Image of the WebRH Schema Editor]</p>

  <hr class="margin-top--10 margin-bottom--10">

  <h3>FTS (Flexible template system)</h3>

  <p>The Flexible Template System refers to the authoring tools and pattern libraries used to build pages within the Drupal CMS.  Fields for content, as well as settings that control design and layout, are exposed to content editors, simplifying the page building process. Using patterns enables authors to have flexibility with the page layout and design without having to write code. Various patterns from the WebRH library are loaded inside Drupal based on the content type. Different content types (such as blog posts or events) serve different purposes, and therefore make use of different patterns. The FTS content type is for general use.</p>

  <p>In Drupal 7, the WebRH patterns are built with a local version of PatternKit during active development, and then imported into Drupal with the Pattern Builder Importer (PBI) module. </p>

  <p>In Drupal 8+, the PatternKit module will fetch the WebRH patterns via PatternAPI, a services layer which dynamically pulls the appropriate pattern by name and by version.</p>

  <pfe-cta>
    <a href="#">Get started with our Adobe XD FTS design kit</a>
  </pfe-cta>

  <p>[image of FTS UI]</p>

  <hr class="margin-top--10 margin-bottom--10">

  <h3>PatternKit</h3>

  <p><a href="https://www.drupal.org/project/patternkit">Patternkit 2.x</a> is a Drupal 8+ module (built by Red Hat) that surfaces libraries like WebRH to content management systems like Drupal.  It leverages the <a href="https://github.com/json-editor/json-editor">JSON schema editor</a> to expose the fields defined within the component & pattern schemas, so content authors can not add content and change settings and see the results in real time.</p>

  <p><a href="https://github.com/PatternBuilder/pattern-kit">PatternKit 1.x</a> is used by front-end developers to develop, test, and demo WebRH Patterns. The <a href="https://webrh-patternkit.int.open.paas.redhat.com/schema/pattern_page">WebRH schema editor</a> (formerly known as PatternKit) is a playground for anyone to interact with the WebRH Pattern Library. It's hosted on OpenShift and is updated every 3 weeks to show the latest updates to WebRH.</p>

  <hr class="margin-top--10 margin-bottom--10">

  <h3>WebDMS</h3>

  <p>WebDMS is a marketing-focused front-end code repository...</p>

  
{%- endcall %}
